{"version":3,"sources":["Api.js","CreateChannel.jsx","Card.jsx","UnderTheLimits.jsx","Player.jsx","Score.jsx","App.jsx","serviceWorker.js","index.js"],"names":["socket","openSocket","process","SOCKET","CreateChannel","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","show","handleShow","bind","assertThisInitialized","handleClose","setState","_this2","react_default","a","createElement","Fragment","Button","bsStyle","onClick","Modal","onHide","Header","closeButton","Title","Body","Form","onSubmit","e","preventDefault","onCreateChannel","channelName","inline","FormControl","type","value","placeholder","onChange","target","Component","Card","MainWrapper","React","wrapperProps","definition","length","OverlayTrigger","placement","id","toLowerCase","replace","overlay","Tooltip","Col","sm","md","className","style","width","border","checked","UnderTheLimits","answerSelectNum","handleChange","prevProps","currentDeckQuestion","currentChannel","deckQuestions","text","occurences","match","i","channelId","answers","index","player","indexOf","console","warn","push","splice","emit","keys","values","questionText","map","hand","currentStatus","playersShuffle","players","slice","j","Math","floor","random","_ref","Row","isGameMaster","src_Card","key","getFilledQuestionText","winnerId","find","p","name","answer","Player","noScore","Label","Badge","score","Score","src_Player","DEFAULT_ERROR_TIMEOUT","DEFAULT_SUCCESS_TIMEOUT","App","cb","playerName","JSON","parse","localStorage","getItem","errMsg","error","setTimeout","on","successMsg","success","lobbyResponse","lobby","updateLobby","err","responseLobby","waitingPlayers","channels","channelResponse","channel","updateChannel","me","c","createChannel","Grid","admin","concat","src_Score","src_UnderTheLimits","src_CreateChannel","setItem","stringify","Alert","renderStep","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bef8dfac.chunk.js","sourcesContent":["import openSocket from 'socket.io-client';\nconst  socket = openSocket(process.env.SOCKET || 'http://localhost:3001');\n\nfunction initPlayer(playerName, cb) {\n  socket.emit('initPlayer', playerName );\n  socket.on( 'playerCreated', lobbyResponse => cb(null, lobbyResponse.player ));\n}\n\nfunction createPlayer(playerName, cb) {\n  socket.emit('createPlayer', playerName );\n  socket.on( 'playerCreated', lobbyResponse => cb(null, lobbyResponse.player ));\n}\n\nfunction updateLobby(cb) {\n  socket.on('updateLobby', lobbyResponse => {\n    cb(null, lobbyResponse.lobby );\n  });\n}\n\nfunction updateChannel(cb) {\n  socket.on('updateChannel', channelResponse => {\n    cb(null, channelResponse.channel );\n  });\n}\n\nfunction gotoChannel( channelId, cb ) {\n  socket.emit('gotoChannel', channelId );\n}\n\nfunction createChannel(channelName) {\n  socket.emit('createChannel', channelName);\n}\n\nfunction startGame(channelId) {\n  socket.emit('nextRound', channelId);\n}\n\nfunction selectedAnswers(channelId, answers) {\n  socket.emit('selectedAnswers', channelId, answers);\n}\n\nfunction selectedJudgment(channelId, winnerId) {\n  socket.emit('selectedJudgment', channelId, winnerId);\n}\n\nfunction error(cb) {\n  socket.on('err', errMsg => cb( errMsg ) );\n}\n\nfunction success(cb) {\n  socket.on('success', successMsg => cb( successMsg ) );\n}\n\n\nexport {\n  initPlayer,\n  createPlayer,\n  updateLobby,\n  updateChannel,\n  createChannel,\n  startGame,\n  selectedAnswers,\n  selectedJudgment,\n  gotoChannel,\n  error,\n  success\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport {\n  Modal,\n  Button,\n  Form,\n  FormControl\n} from 'react-bootstrap';\n\nclass CreateChannel extends Component {\n\n  state = {\n    show: false\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleShow = this.handleShow.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  handleClose() {\n    this.setState({ show: false });\n  }\n\n  handleShow() {\n    this.setState({ show: true });\n  }\n\n\n  render() {\n    return (\n      <React.Fragment>\n        <Button\n          bsStyle=\"success\"\n          onClick={this.handleShow}>\n          Create channel\n        </Button>\n        <Modal show={this.state.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Créer un salon</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form\n              onSubmit={(e) => {\n                e.preventDefault();\n                this.props.onCreateChannel( this.state.channelName );\n                this.handleClose();\n              }}\n              inline\n            >\n              <FormControl\n                type=\"text\"\n                value={ this.state.channelName || \"\" }\n                placeholder=\"Nom du salon\"\n                onChange={(e) => {\n                    this.setState( { channelName: e.target.value } );\n                } }\n              />\n            <Button type=\"submit\">Valider</Button>\n            </Form>\n          </Modal.Body>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default CreateChannel;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {\n    Col,\n    OverlayTrigger,\n    Tooltip\n} from 'react-bootstrap';\n\nclass Card extends Component {\n\n  render() {\n\n    let MainWrapper =  React.Fragment;\n    let wrapperProps = {};\n    if (this.props.definition && this.props.definition.length > 0) {\n      MainWrapper = OverlayTrigger;\n      wrapperProps = {\n        placement: \"top\",\n        id: this.props.definition.toLowerCase().replace(\" \", \"_\"), // For accessibility\n        overlay: (\n          <Tooltip>\n            {this.props.definition}\n          </Tooltip>\n        ),\n      };\n    }\n\n    return (\n      <MainWrapper {...wrapperProps}>\n          <Col sm={6} md={3}>\n            <div\n              className=\"card\"\n              style={{ width: '20rem'}}\n              onClick={() => this.props.onClick && this.props.onClick()}\n            >\n              <div\n                className=\"card-body\"\n                style={{ border: ( this.props.checked ? \"3px solid red\" : \"\") }}\n              >\n                  <p className=\"card-text\">\n                    {this.props.value}\n                  </p>\n              </div>\n            </div>\n          </Col>\n      </MainWrapper>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport './App.css';\nimport{\nselectedAnswers,\nselectedJudgment\n} from './Api';\nimport {\n  Row\n} from 'react-bootstrap';\nimport Card from './Card';\n\nclass UnderTheLimits extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      answerSelectNum: 1\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const currentDeckQuestion = this.props.currentChannel.deckQuestions[0].text;\n    const prevDeckQuestion = prevProps.currentChannel.deckQuestions[0].text;\n    if ( currentDeckQuestion !== prevDeckQuestion) {\n      const occurences = (currentDeckQuestion.match(/______/g) || []).length;\n      this.setState({ answerSelectNum: occurences });\n    }\n  }\n\n  handleChange(i) {\n      const index = this.props.player.answers.indexOf(i);\n      if (index < 0) {\n          if (this.props.player.answers.length >= this.state.answerSelectNum) {\n            console.warn(`Vous ne pouvez pas jouer davantage de réponses pour cette question !`); // TODO Change with <Alert color=\"primary\">\n          }else {\n            this.props.player.answers.push(i);\n          }\n      } else {\n          this.props.player.answers.splice(index, 1);\n      }\n\n      selectedAnswers(this.props.currentChannel.id, this.props.player.answers);\n  }\n\n  getFilledQuestionText(keys, values) {\n      let questionText = this.props.currentChannel.deckQuestions[0].text;\n      keys.map((i) => questionText = questionText.replace('______', values[i].text));\n      return questionText;\n }\n\n  render() {\n    if(this.props.player && this.props.player.hand) {\n        if(this.props.currentChannel.currentStatus === 'JUDGING_CARD') {\n            const playersShuffle = this.props.currentChannel.players.slice();\n            for (let i = playersShuffle.length - 1; i > 0; i -= 1) {\n              const j = Math.floor(Math.random() * (i + 1));\n              [playersShuffle[i], playersShuffle[j]] = [playersShuffle[j], playersShuffle[i]];\n            }\n\n            return (\n            <React.Fragment>\n                <Row>\n                <React.Fragment>\n                {playersShuffle.map(player => {\n                if (!player.isGameMaster){ return(\n                  <Card\n                  key={'p'+player.id}\n                  value={this.getFilledQuestionText(player.answers, player.hand)}\n                  onClick={this.props.player.isGameMaster?() => selectedJudgment(this.props.currentChannel.id, player.id):() => {}}\n                  />\n              )}else{\n                  return null;\n              }})}\n                </React.Fragment>\n                </Row>\n            </React.Fragment>\n            );\n\n        }else if(this.props.currentChannel.currentStatus === 'WAITING_GAME') {\n\n            const player = this.props.currentChannel.players.find((p) => {return p.isGameMaster;});\n\n            return (\n            <React.Fragment>\n                <Row>\n                <p>Le gagnant de la manche est {player.name} :</p>\n                {\n                <Card\n                key={'p'+player.id}\n                value={this.getFilledQuestionText(player.answers, player.hand)}\n                onClick={() => {}}\n                />\n                }\n                </Row>\n                <Row>\n                {\n                    this.props.player.hand.map((answer, index) => (\n                      <Card\n                        key={answer.text}\n                        value={answer.text}\n                        definition={answer.definition}\n                        onClick={() => {}}\n                      />\n                    ))\n                }\n                </Row>\n            </React.Fragment>\n            );\n        } else {\n            return (\n            <React.Fragment>\n                <Row>\n                    <Card key='questioncard' value={this.getFilledQuestionText(this.props.player.answers, this.props.player.hand)}/>\n                </Row>\n                <Row>\n                {\n                    this.props.player.hand.map((answer, index) => (\n                      <Card\n                        key={answer.text}\n                        value={answer.text}\n                        definition={answer.definition}\n                        onClick={this.props.player.isGameMaster?() => {}:() => this.handleChange(index)}\n                        checked={this.props.player.answers.indexOf(index) >= 0}\n                      />\n                    ))\n                }\n                </Row>\n            </React.Fragment>\n            );\n        }\n    } else {\n     return null;\n    }\n  }\n}\n\nexport default UnderTheLimits;\n","import React from \"react\";\nimport { Badge, Label } from \"react-bootstrap\";\n\nconst Player = ({ value, noScore }) => {\n  return (\n    <React.Fragment>\n      <dt>\n        {value.isGameMaster ? \">\" : \"\"}\n        <Label>{value.name}</Label>\n        { !noScore && <Badge>{value.score} pt(s)</Badge> }\n      </dt>\n    </React.Fragment>\n  );\n}\n\n\nexport default Player;\n","import React from \"react\";\nimport { Row } from \"react-bootstrap\";\nimport Player from \"./Player\";\n\nconst Score = ({ players }) => {\n  return (\n    <dl>\n    {\n      players.map(p => (\n        // Without the `key`, React will fire a key warning\n        <Row key={p.id}>\n          <Player value={p} />\n        </Row>\n      ))\n    }\n    </dl>\n  );\n}\n\n\nexport default Score;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {\n  error,\n  success,\n  createPlayer,\n  updateLobby,\n  createChannel,\n  updateChannel,\n  gotoChannel,\n  startGame\n} from './Api';\nimport {\n  Col,\n  Button,\n  FormControl,\n  Row,\n  Grid,\n  Alert,\n  Label,\n  Form\n} from 'react-bootstrap';\nimport CreateChannel from './CreateChannel';\nimport UnderTheLimits from './UnderTheLimits';\nimport Score from './Score';\nimport Player from './Player';\n\nconst DEFAULT_ERROR_TIMEOUT = 3000;\nconst DEFAULT_SUCCESS_TIMEOUT = 10000;\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        playerName: (JSON.parse(localStorage.getItem('utl-player')) || []).name || \"\"\n    };\n\n    error((errMsg) => {\n      this.setState({\n        error: errMsg\n      });\n      setTimeout( (() => {\n           this.setState({error:''});\n      }), DEFAULT_ERROR_TIMEOUT);\n    });\n\n    success((successMsg) => {\n      this.setState({\n        success: successMsg\n      });\n      setTimeout( (() => {\n           this.setState({success:''});\n      }), DEFAULT_SUCCESS_TIMEOUT);\n    });\n\n    updateLobby((err, responseLobby) => {\n      let lobby = { waitingPlayers: [], channels: [] };\n\n      if (this.state.lobby) {\n        if( this.state.lobby.waitingPlayers ) {\n          lobby.waitingPlayers = this.state.lobby.waitingPlayers;\n        }\n        if( this.state.lobby.channels ) {\n          lobby.channels = this.state.lobby.channels;\n        }\n      }\n      if (responseLobby.channels) {\n        lobby.channels = responseLobby.channels;\n      }\n      if (responseLobby.waitingPlayers) {\n        lobby.waitingPlayers = responseLobby.waitingPlayers;\n      }\n\n      this.setState({\n        lobby\n      });\n    })\n\n    updateChannel((err, channel) => {\n        let me = channel.players.find(c => c.id === this.state.player.id);\n\n        this.setState({\n            player: me,\n            currentChannel: channel\n        });\n    })\n\n    this.onCreateChannel = this.onCreateChannel.bind(this);\n  }\n\n  onCreateChannel( channelName ) {\n    createChannel( channelName );\n  }\n\n  renderStep() {\n    if ( this.state.currentChannel ) {\n\n      return (\n      <Grid>\n        <Row>\n        {this.state.player.name === this.state.currentChannel.admin.name && (this.state.currentChannel.currentStatus === 'WAITING_GAME' || this.state.currentChannel.currentStatus === 'IDLE')? (\n            <Col sm={4}>\n              <Button onClick={()=> {\n                  startGame( this.state.currentChannel.id );\n              }}>Next round</Button>\n            </Col>\n          ) : (\n        <div></div>\n        )}\n\n          <Col sm={4}>\n            <h1><Label>{this.state.currentChannel.name}</Label></h1>\n            <h3>{this.state.player.isGameMaster ?`${this.state.player.name} c'est vous le patron !` : `${this.state.player.name} à vous de jouer !`}</h3>\n            <Score players={this.state.currentChannel.players} />\n          </Col>\n        </Row>\n        <Row>\n            <UnderTheLimits player={this.state.player} currentChannel={this.state.currentChannel}/>\n        </Row>\n      </Grid>\n      );\n  } else if( this.state.lobby && this.state.player ) {\n      return (\n        <Row>\n          <Col sm={4}>\n            <CreateChannel onCreateChannel={this.onCreateChannel}/>\n          </Col>\n          <Col sm={4}>\n            <h1><Label>PLAYERS</Label></h1>\n            {\n              this.state.lobby.waitingPlayers.map( (p,i)=>{\n                return (\n                  <Player value={p} noScore />\n                );\n              })\n            }\n          </Col>\n          <Col sm={4}>\n            <h1><Label>CHANNELS</Label></h1>\n            {\n              this.state.lobby.channels.map( (c,i)=>{\n                return (\n                    <Form key={i} inline>\n                      <Button onClick={()=> {\n                        gotoChannel(c.id, (err, channel) => {\n                          this.setState({ currentChannel: channel });\n                        });\n                      }}>\n                        {c.name}\n                      </Button>\n                    </Form>\n                )\n              })\n            }\n          </Col>\n        </Row>\n      );\n    } else {\n        return (\n          <React.Fragment>\n            <Form onSubmit={(e) => {\n                  e.preventDefault()\n                  createPlayer( this.state.playerName, ( err, player ) => {\n                    localStorage.setItem('utl-player', JSON.stringify(player));\n                    this.setState({ player });\n                  } )\n                }} inline>\n                <FormControl\n                  type=\"text\"\n                  value={ this.state.playerName || \"\" }\n                  placeholder=\"Name\"\n                  onChange={(e) => {\n                      this.setState( { playerName: e.target.value } );\n                  } }\n                />\n                {\n                  // onClick mandatory to avoid page reload.\n                  // Remove the line when adding react-router\n                }\n              <Button\n                bsStyle=\"success\"\n                type=\"submit\"\n              >\n                  Ok\n                </Button>\n            </Form>\n          </React.Fragment>\n        );\n    }\n  }\n\n  render() {\n    return (\n      <Grid>\n        <Row className=\"App\">\n          <h1>Under the limits</h1>\n          <header className=\"App-header\">\n            { this.state.error ? <Alert bsStyle=\"danger\">{this.state.error}</Alert> : <p></p> }\n            { this.state.success ? <Alert bsStyle=\"success\">{this.state.success}</Alert> : <p></p> }\n              <div className=\"App\">\n                { this.renderStep() }\n              </div>\n          </header>\n        </Row>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}